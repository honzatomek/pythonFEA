Thu Jul 21 18:28:29 2022

geometry_test():
  Python version: 3.6.9
  Test geometry().

angle_degree_test():
  angle_degree() computes an angle.

           X           Y       Theta  atan2(y,x)  angle_degree

    1.000000    0.000000    0.000000    0.000000    0.000000
    0.866025    0.500000   30.000000   30.000000   30.000000
    0.500000    0.866025   60.000000   60.000000   60.000000
    0.000000    1.000000   90.000000   90.000000   90.000000
   -0.500000    0.866025  120.000000  120.000000  120.000000
   -0.866025    0.500000  150.000000  150.000000  150.000000
   -1.000000    0.000000  180.000000  180.000000  180.000000
   -0.866025   -0.500000  210.000000  -150.000000  210.000000
   -0.500000   -0.866025  240.000000  -120.000000  240.000000
   -0.000000   -1.000000  270.000000  -90.000000  270.000000
    0.500000   -0.866025  300.000000  -60.000000  300.000000
    0.866025   -0.500000  330.000000  -30.000000  330.000000
    1.000000   -0.000000  360.000000   -0.000000  360.000000

angle_half_test():
  angle_half() is given P1, P2, P3, forming an angle.
  It finds P4 so P4, P2, P3 is half the angle.

  Original Angle    Half Angle

    0.000000    0.000000
    0.523599    0.261799
    1.047198    0.523599
    1.570796    0.785398
    2.094395    1.047198
    2.617994    1.308997
    3.141593    1.570796
    3.665191    4.974188
    4.188790    5.235988
    4.712389    5.497787
    5.235988    5.759587
    5.759587    6.021386
    6.283185    6.283185

angle_radian_test():
  angle_radian() computes an angle in radians.

           X           Y       Theta  atan2(y,x)  angle_radian

    1.000000    0.000000    0.000000    0.000000    0.000000
    0.866025    0.500000   30.000000    0.523599    0.523599
    0.500000    0.866025   60.000000    1.047198    1.047198
    0.000000    1.000000   90.000000    1.570796    1.570796
   -0.500000    0.866025  120.000000    2.094395    2.094395
   -0.866025    0.500000  150.000000    2.617994    2.617994
   -1.000000    0.000000  180.000000    3.141593    3.141593
   -0.866025   -0.500000  210.000000   -2.617994    3.665191
   -0.500000   -0.866025  240.000000   -2.094395    4.188790
   -0.000000   -1.000000  270.000000   -1.570796    4.712389
    0.500000   -0.866025  300.000000   -1.047198    5.235988
    0.866025   -0.500000  330.000000   -0.523599    5.759587
    1.000000   -0.000000  360.000000   -0.000000    6.283185

annulus_area_test():
  annulus_area() computes the centroid of a circular annulus.

  The circle has center        5.000000  3.000000
  The inner radius is R1 =     2.000000
  The outer radius is R2 =     3.000000

  Area: 15.707963

ball01_volume_test():
  ball01_volume() returns the volume of the unit ball.

  ball01_volume() = 4.18879

circle_area_test():
  circle_area() computes the area of a circle of radius R.

      R            Area

    1.000000    3.141593
    2.000000   12.566371
    4.000000   50.265482
    8.000000  201.061930

circle_dia2imp_2d_test():
  circle_dia2imp_2d() converts a diameter to an
  implicit circle in 2D.

  point P1:
[-0.08073418  7.54648713]

  point P2:
[ 4.08073418 -1.54648713]

  The implicit circle:

  Radius = 5.000000
  Center = ( 2.000000,  3.000000 )

circle_imp_point_dist_2d_test():
  circle_imp_point_dist_2d() checks, by finding the
  distance D from a point (X,Y) to a circle.

  Circle has center (0.000000,0.000000) and radius 5.000000

       X       Y       D

    4.4847   -8.6506    4.7440
    1.3379   -1.6892    2.8452
   -6.5616    7.4324    4.9144
   -0.1906   -4.9549    0.0414
    6.2544   -3.5969    2.2149
   -0.6043   -1.7922    3.1086
   -0.4935    6.8857    1.9034
   -8.0772   -8.7680    6.9214
   -5.2669    9.7009    6.0385
    8.3293    4.1468    4.3045

circle_imp_print_2d_test():
  circle_imp_print_2d() prints a circle definition.

  An example circle:

  Radius = 2.000000
  Center = ( 5.000000,  -2.000000 )

circle_lune_angle_by_height_2d_test():
  circle_lune_angle_by_height_2d() computes the angle of a
  circular lune based on the "height" of the circular triangle.

      R            H        Angle

    2.000000   -2.000000    6.283185
    2.000000   -1.666667    5.111814
    2.000000   -1.333333    4.601048
    2.000000   -1.000000    4.188790
    2.000000   -0.666667    3.821266
    2.000000   -0.333333    3.476489
    2.000000    0.000000    3.141593
    2.000000    0.333333    2.806696
    2.000000    0.666667    2.461919
    2.000000    1.000000    2.094395
    2.000000    1.333333    1.682137
    2.000000    1.666667    1.171371
    2.000000    2.000000    0.000000

circle_lune_area_by_angle_2d_test():
  circle_lune_area_by_angle_2d() computes the area of a
  circular lune, defined by joining the endpoints
  of a circular arc.

      R            Theta1      Theta2        Area

    2.000000    0.000000    0.000000    0.000000
    2.000000    0.000000    0.523599    0.047198
    2.000000    0.000000    1.047198    0.362344
    2.000000    0.000000    1.570796    1.141593
    2.000000    0.000000    2.094395    2.456739
    2.000000    0.000000    2.617994    4.235988
    2.000000    0.000000    3.141593    6.283185
    2.000000    0.000000    3.665191    8.330383
    2.000000    0.000000    4.188790   10.109631
    2.000000    0.000000    4.712389   11.424778
    2.000000    0.000000    5.235988   12.204026
    2.000000    0.000000    5.759587   12.519173
    2.000000    0.000000    6.283185   12.566371

circle_lune_area_by_height_2d_test():
  circle_lune_area_by_height_2d() computes the area of a
  circular lune based on the "height" of the circular triangle.

      R            H        Area

    2.000000   -2.000000   12.566371
    2.000000   -1.666667   12.066198
    2.000000   -1.333333   11.189712
    2.000000   -1.000000   10.109631
    2.000000   -0.666667    8.899612
    2.000000   -0.333333    7.610320
    2.000000    0.000000    6.283185
    2.000000    0.333333    4.956051
    2.000000    0.666667    3.666759
    2.000000    1.000000    2.456739
    2.000000    1.333333    1.376659
    2.000000    1.666667    0.500173
    2.000000    2.000000    0.000000

circle_lune_height_by_angle_2d_test():
  circle_lune_height_by_angle_2d() computes the height of
  the triangle of a circular lune, given the subtended angle.

      R            Angle        Height

    2.000000    0.000000    2.000000
    2.000000    0.523599    1.931852
    2.000000    1.047198    1.732051
    2.000000    1.570796    1.414214
    2.000000    2.094395    1.000000
    2.000000    2.617994    0.517638
    2.000000    3.141593    0.000000
    2.000000    3.665191   -0.517638
    2.000000    4.188790   -1.000000
    2.000000    4.712389   -1.414214
    2.000000    5.235988   -1.732051
    2.000000    5.759587   -1.931852
    2.000000    6.283185   -2.000000

circle_sector_area_2d_test():
  circle_sector_area_2d() computes the area of a
  circular sector, defined by joining the endpoints
  of a circular arc.

      R            Theta1      Theta2        Area

    2.000000    0.000000    0.000000    0.000000
    2.000000    0.000000    0.523599    1.047198
    2.000000    0.000000    1.047198    2.094395
    2.000000    0.000000    1.570796    3.141593
    2.000000    0.000000    2.094395    4.188790
    2.000000    0.000000    2.617994    5.235988
    2.000000    0.000000    3.141593    6.283185
    2.000000    0.000000    3.665191    7.330383
    2.000000    0.000000    4.188790    8.377580
    2.000000    0.000000    4.712389    9.424778
    2.000000    0.000000    5.235988   10.471976
    2.000000    0.000000    5.759587   11.519173
    2.000000    0.000000    6.283185   12.566371

circle_triangle_area_2d_test():
  circle_triangle_area_2d() computes the area of a
  circular triangle.

      R            Theta1      Theta2        Area

    2.000000    0.000000    0.000000    0.000000
    2.000000    0.000000    0.523599    1.000000
    2.000000    0.000000    1.047198    1.732051
    2.000000    0.000000    1.570796    2.000000
    2.000000    0.000000    2.094395    1.732051
    2.000000    0.000000    2.617994    1.000000
    2.000000    0.000000    3.141593    0.000000
    2.000000    0.000000    3.665191   -1.000000
    2.000000    0.000000    4.188790   -1.732051
    2.000000    0.000000    4.712389   -2.000000
    2.000000    0.000000    5.235988   -1.732051
    2.000000    0.000000    5.759587   -1.000000
    2.000000    0.000000    6.283185   -0.000000

circle01_length_test():
  circle01_length() returns the length of the unit circle.

  circle01_length() = 6.28319

circles_intersect_area_2d_test():
  circles_intersect_area_2d() determines the area of the
  intersection of two circes of radius R1 and R2,
  with a distance D between the centers.

      R1      R2       D    Area

  1.000000  0.500000  1.500000  0.000000
  1.000000  0.500000  1.000000  0.350767
  1.000000  0.500000  0.500000  0.785398
  1.000000  1.000000  1.500000  0.453312
  1.000000  1.000000  1.000000  1.228370
  1.000000  1.000000  0.000000  3.141593

circles_intersect_points_2d_test():
  circles_intersect_points_2d() determines the intersections of
  two circles in 2D.

  The first circle:

  Radius = 5.000000
  Center = ( 0.000000,  0.000000 )

  The second circle:

  Radius = 0.500000
  Center = ( 5.000000,  5.000000 )

  The circles do not intersect.

  The second circle:

  Radius = 5.000000
  Center = ( 7.071068,  7.071068 )

  The circles intersect at two points:

    X       Y

  3.535329  3.535739
  3.535739  3.535329

  The second circle:

  Radius = 3.000000
  Center = ( 4.000000,  0.000000 )

  The circles intersect at two points:

    X       Y

  4.000000  3.000000
  4.000000  -3.000000

  The second circle:

  Radius = 3.000000
  Center = ( 6.000000,  0.000000 )

  The circles intersect at two points:

    X       Y

  4.333333  2.494438
  4.333333  -2.494438

  The second circle:

  Radius = 5.000000
  Center = ( 0.000000,  0.000000 )

  The circles coincide (infinite intersection).

cone_volume_test():
  cone_volume() computes the volume of a cone.

        R        H        ConeVolume

      1.00000000      1.00000000      1.04719755
      1.00000000      2.00000000      2.09439510
      1.00000000      4.00000000      4.18879020
      1.00000000      8.00000000      8.37758041
      1.00000000     16.00000000     16.75516082

      1.00000000      1.00000000      1.04719755
      2.00000000      1.00000000      4.18879020
      4.00000000      1.00000000     16.75516082
      8.00000000      1.00000000     67.02064328
     16.00000000      1.00000000    268.08257311

cube01_volume_test():
  cube01_volume() returns the volume of the unit cube.

  cube01_volume() = 1

cylinder_volume_test():
  cylinder_volume() returns the volume of a cylinder.

  cylinder_volume() =  471.23889803846896
  Exact volume      =  471.23889803846896

degrees_to_radians_test():
  degrees_to_radians() converts an angle from degrees
  to radians.

  Degrees     Radians     Degrees

  -60.000000   -1.047198  -60.000000
  -30.000000   -0.523599  -30.000000
    0.000000    0.000000    0.000000
   30.000000    0.523599   30.000000
   60.000000    1.047198   60.000000
   90.000000    1.570796   90.000000
  120.000000    2.094395  120.000000
  150.000000    2.617994  150.000000
  180.000000    3.141593  180.000000
  210.000000    3.665191  210.000000
  240.000000    4.188790  240.000000
  270.000000    4.712389  270.000000
  300.000000    5.235988  300.000000
  330.000000    5.759587  330.000000
  360.000000    6.283185  360.000000
  390.000000    6.806784  390.000000
  420.000000    7.330383  420.000000

disk01_area_test():
  disk01_area() returns the area of the unit disk.

  disk01_area() = 3.14159

disk01_quarter_area_test():
  disk01_quarter_area() returns the area of the unit quarter disk.

  disk01_quarter_area() = 0.785398

hexagon01_area_test():
  hexagon01_area() returns the area of the unit hexagon.

  hexagon01_area() =  2.598076211353316

hyperball01_volume_test():
  hyperball01_volume() returns the volume of the unit hyperball
  in M dimensions.

   M  Volume

   1  2
   2  3.14159
   3  4.18879
   4  4.9348
   5  5.26379
   6  5.16771
   7  4.72477
   8  4.05871
   9  3.29851
  10  2.55016

hypercube01_volume_test():
  hypercube01_volume() returns the volume of the unit hypercube
  in M dimensions.

  hypercube01_volume(3) = 1

hypersphere01_area_test():
  hypersphere01_area() returns the volume of the unit hypersphere.

   M  Area

   1  2
   2  6.28319
   3  12.5664
   4  19.7392
   5  26.3189
   6  31.0063
   7  33.0734
   8  32.4697
   9  29.6866
  10  25.5016

i4_ceiling_test():
  i4_ceiling() evaluates the "ceiling" of a real number.
 
      R8    i4_ceiling(R8)
 
  -86.8096             -86
   35.0877              36
  -18.7673             -18
   60.3300              61
    5.6361               6
  -85.7923             -85
  -95.9395             -95
  -20.0155             -20
   77.5587              78
   27.0330              28

i4_log_10_test():
  i4_log_10(): whole part of log base 10,

  X, i4_log_10

     0             0
     1             0
     2             0
     3             0
     9             0
    10             1
    11             1
    99             1
   101             2
    -1             0
    -2             0
    -3             0
    -9             0

i4_modp_test():
  i4_modp() factors a number
  into a multiple M and a positive remainder R.

    Number   Divisor  Multiple Remainder

       107        50         2         7
       107       -50        -2         7
      -107        50        -3        43
      -107       -50         3        43

  Repeat using Python % Operator:

       107        50         2         7
       107       -50        -3       -43
      -107        50        -3        43
      -107       -50         2        -7

i4_wrap_test():
  i4_wrap() forces an integer to lie within given limits.

  ILO = 4
  IHI = 8

     I  i4_wrap(I)

     -10       5
      -9       6
      -8       7
      -7       8
      -6       4
      -5       5
      -4       6
      -3       7
      -2       8
      -1       4
       0       5
       1       6
       2       7
       3       8
       4       4
       5       5
       6       6
       7       7
       8       8
       9       4
      10       5
      11       6
      12       7
      13       8
      14       4
      15       5
      16       6
      17       7
      18       8
      19       4
      20       5

line_exp2imp_test():
  line_exp2imp() converts explicit to implicit lines.

  Implicit line A, B, C = 1.000000  2.000000  3.000000

  point P1:
[-0.6 -1.2]

  point P2:
[-1.2 -0.9]
  Recovered A, B, C =  0.238095  0.476190  0.714286

line_exp_perp_test():
  line_exp_perp() is given an explicit line (P1,P2),
  and another point P3.  It then finds a point
  P4 on (P1,P2) so that (P1,P2) is perpendicular
  to (P3,P4).

  point P1:
[1. 3.]

  point P2:
[4. 0.]

  point P3:
[0. 0.]

  point P4:
[2. 2.]

  point P3:
[ 5. -1.]

  point P4:
[ 5. -1.]

  point P3:
[5. 3.]

  point P4:
[3. 1.]

lines_exp_int_test():
  lines_exp_int() finds intersections of
  two explicit lines in 2D.


  P1  0.000000  2.000000
  P2  4.000000  0.000000

  Q1  0.000000  -1.000000
  Q2  1.000000  0.000000
  Intersection at 2.000000  1.000000

  P1  0.000000  2.000000
  P2  4.000000  0.000000

  Q1  0.000000  0.250000
  Q2  0.500000  0.000000
  Lines are parallel, no intersection.

  P1  0.000000  2.000000
  P2  4.000000  0.000000

  Q1  0.000000  2.000000
  Q2  4.000000  0.000000
  Lines are coincident.

lines_imp_int_test():
  lines_imp_int() finds the intersection of
  two lines written in implicit form.

  Line 1 coefficients:  1.000000  2.000000  -4.000000
  Line 2 coefficients:  1.000000  -1.000000  -1.000000
  Intersection at 2.000000  1.000000

  Line 1 coefficients:  1.000000  2.000000  -4.000000
  Line 2 coefficients:  2.000000  4.000000  -1.000000
  Lines are parallel, no intersection.

  Line 1 coefficients:  1.000000  2.000000  -4.000000
  Line 2 coefficients:  -3.000000  -6.000000  12.000000
  Lines are coincident.

polygon_area_test():
  polygon_area() computes the area of a polygon.

  Number of polygonal vertices = 4

  The polygon vertices:

  Row:       0             1       
  Col
      0 :           1             0  
      1 :           2             1  
      2 :           1             2  
      3 :           0             1  

  Exact area is        2
  The computed area is 2

  Number of polygonal vertices = 8

  The polygon vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           3             0  
      2 :           3             3  
      3 :           2             3  
      4 :           2             1  
      5 :           1             1  
      6 :           1             2  
      7 :           0             2  

  Exact area is        6
  The computed area is 6

pyramid_volume_test():
  pyramid_volume() returns the volume of a pyramid.

     Radius     Height     Volume

    6.0010    3.9031  187.4095
    1.2497    7.8955   16.4406
    7.2908    5.1152  362.5383
    8.8114    2.4048  248.9493
    5.6558    8.1251  346.5427

pyramid01_volume_test():
  pyramid01_volume() returns the volume of the unit pyramid.

  pyramid01_volume() = 1.33333

r8_acos_test():
  r8_acos() computes the arc-cosine of an angle.

       C            r8_acos(C)        ACOS(C)

        -1.16667         3.14159
              -1         3.14159         3.14159
       -0.833333         2.55591         2.55591
       -0.666667         2.30052         2.30052
            -0.5          2.0944          2.0944
       -0.333333         1.91063         1.91063
       -0.166667         1.73824         1.73824
               0          1.5708          1.5708
        0.166667         1.40335         1.40335
        0.333333         1.23096         1.23096
             0.5          1.0472          1.0472
        0.666667        0.841069        0.841069
        0.833333        0.585686        0.585686
               1               0               0
         1.16667               0

r8_sign_test():
  r8_sign() returns the sign of an R8.

     R8     r8_sign(R8)

   -1.2500        -1
   -0.2500        -1
    0.0000         1
    0.5000         1
    9.0000         1

r8mat_det_4d_test():
  r8mat_det_4d() computes the determinant of a 4 by 4 matrix

  Matrix:

  Col:       0             1             2             3       
  Row
      0 :           1             1             1             1  
      1 :           1            10           100          1000  
      2 :           1             4            16            64  
      3 :           1             2             4             8  

  r8mat_det_4d computes determinant: -2592
  Exact determinant is -2592

r8mat_solve_test():
  r8mat_solve() solves linear systems.

  The linear system:

  Col:       0             1             2             3             4       
  Row
      0 :           1             2             3            14             7  
      1 :           4             5             6            32            16  
      2 :           7             8             0            23             7  

  Factored matrix and solutions:

  Col:       0             1             2             3             4       
  Row
      0 :           1             0             0             1             1  
      1 :           0             1             0             2             0  
      2 :           0             0             1             3             2  

r8vec_indicator1_test():
  r8vec_indicator1() returns the 1-based indicator matrix.

  the 1-based indicator vector:
[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]

radians_to_degrees_test():
  radians_to_degrees() converts an angle from radians
  to degrees.

  Degrees     Radians     Degrees

  -60.000000   -1.047198  -60.000000
  -30.000000   -0.523599  -30.000000
    0.000000    0.000000    0.000000
   30.000000    0.523599   30.000000
   60.000000    1.047198   60.000000
   90.000000    1.570796   90.000000
  120.000000    2.094395  120.000000
  150.000000    2.617994  150.000000
  180.000000    3.141593  180.000000
  210.000000    3.665191  210.000000
  240.000000    4.188790  240.000000
  270.000000    4.712389  270.000000
  300.000000    5.235988  300.000000
  330.000000    5.759587  330.000000
  360.000000    6.283185  360.000000
  390.000000    6.806784  390.000000
  420.000000    7.330383  420.000000

segment_point_dist_test():
  segment_point_dist() computes the distance from a point to a line segment.

  segment endpoint p1:
[1. 2.]

  segment endpoint p2:
[3. 4.]

  test point p:
[2. 3.]

  Distance to segment = 0

  test point p:
[4. 5.]

  Distance to segment = 1.41421

  test point p:
[1. 4.]

  Distance to segment = 1.41421

  test point p:
[0. 0.]

  Distance to segment = 2.23607

segment_point_near_test():
  segment_point_near() computes the nearest point
  from a line segment to a point in 2D.

  TEST = 0
  P1 =       0.438879      0.487775
  P2 =       0.032629      0.608973
  P =        0.905433      0.182855
  PN =       0.438879      0.487775
  DIST =     0.557359
  T =        0.000000

  TEST = 1
  P1 =       0.441620      0.793521
  P2 =       0.571869      0.573486
  P =        0.279494      0.715628
  PN =       0.441620      0.793521
  DIST =     0.179867
  T =        0.000000

  TEST = 2
  P1 =       0.319338      0.894812
  P2 =       0.237244      0.222515
  P =        0.642420      0.733400
  PN =       0.304664      0.774643
  DIST =     0.340265
  T =        0.178744

simplex01_volume_test():
  simplex01_volume() returns the volume of the unit simplex
  in M dimensions.

   M   Volume

   1  1
   2  0.5
   3  0.166667
   4  0.0416667
   5  0.00833333
   6  0.00138889
   7  0.000198413
   8  2.48016e-05
   9  2.75573e-06

sphere_triangle_sides_to_angles_test():
  sphere_triangle_sides_to_angles() takes the sides of a
  spherical triangle and determines the angles.

  A       = 2.058867 (radians)
  A       = 117.964369 (degrees)
  Correct = 117.966667 (radians)

  B       = 1.627136 (radians)
  B       = 93.228029 (degrees)
  Correct = 93.230000 (radians)

  C       = 1.227740 (radians)
  C       = 70.344308 (degrees)
  Correct = 70.343333 (radians)

sphere01_area_test():
  sphere01_area() returns the area of the unit sphere.

  sphere01_area() =  12.5664

sphere01_area_values_test():
  sphere01_area_values() stores areas of the unit sphere in N dimensions.

      N         sphere01_area(N)

             1        2.0000000000000000
             2        6.2831853071795862
             3       12.5663706143591707
             4       19.7392088021787195
             5       26.3189450695716189
             6       31.0062766802998198
             7       33.0733617923198082
             8       32.4696970113341479
             9       29.6865801246483585
            10       25.5016403987734499
            11       20.7251426732889001
            12       16.0231532262550687
            13       11.8381738121826796
            14        8.3897034104910890
            15        5.7216492123495666
            16        3.7652900857422908
            17        2.3966788175913640
            18        1.4786259590003079
            19        0.8858104195716824
            20        0.5161378278002812

sphere01_volume_values_test():
  sphere01_volume_values() stores values of the sphere01_volume function.

      N         sphere01_volume(X)

             1        2.0000000000000000
             2        3.1415926535897931
             3        4.1887902047863914
             4        4.9348022005446790
             5        5.2637890139143249
             6        5.1677127800499703
             7        4.7247659703314007
             8        4.0587121264167676
             9        3.2985089027387069
            10        2.5501640398773451
            11        1.8841038793899001
            12        1.3352627688545891
            13        0.9106287547832831
            14        0.5992645293207921
            15        0.3814432808233045
            16        0.2353306303588932
            17        0.1409811069171390
            18        0.0821458866111282
            19        0.0466216010300885
            20        0.0258068913900141

tetrahedron_barycentric_test():
  tetrahedron_barycentric() converts XYZ to XSI.
  We are computing the XSI coordinates just to verify
  that the points are inside the tetrahedron.

  Tetrahedron vertices

  Row:       0             1             2       
  Col
      0 :           1             4             3  
      1 :           2             4             3  
      2 :           1             6             3  
      3 :           1             4             4  

  (X,Y,Z)   (XSI1,XSI2,XSI3,XSI4):

  1.092976  4.101715  3.119571    0.736595  0.092976  0.050858  0.119571
  1.013792  4.050179  3.004596    0.956523  0.013792  0.025090  0.004596
  1.107359  4.052546  3.128331    0.738037  0.107359  0.026273  0.128331
  1.025419  4.029728  3.002085    0.957632  0.025419  0.014864  0.002085
  1.119643  4.022013  3.024614    0.844736  0.119643  0.011007  0.024614
  1.102964  4.000795  3.000509    0.896130  0.102964  0.000397  0.000509
  1.047971  4.086504  3.005824    0.902953  0.047971  0.043252  0.005824
  1.305003  4.027168  3.101207    0.580206  0.305003  0.013584  0.101207
  1.046969  4.021849  3.000770    0.941336  0.046969  0.010925  0.000770
  1.309508  4.094108  3.005653    0.637785  0.309508  0.047054  0.005653

tetrahedron_centroid_test():
  tetrahedron_centroid() computes the centroid of a tetrahedron

  Tetrahedron vertices:

  Row:       0             1             2       
  Col
      0 :           0      0.942809     -0.333333  
      1 :   -0.816496     -0.816496     -0.333333  
      2 :    0.816496     -0.816496     -0.333333  
      3 :           0             0             1  

  tetrahedron centroid:
[ 0.0000000e+00 -1.7254575e-01  2.5000000e-07]

tetrahedron_sample_test():
  tetrahedron_sample() samples a tetrahedron.
  We are computing the XSI coordinates just to verify
  that the points are inside the tetrahedron.

  Tetrahedron vertices

  Row:       0             1             2       
  Col
      0 :           1             4             3  
      1 :           2             4             3  
      2 :           1             6             3  
      3 :           1             4             4  

  (X,Y,Z)   (XSI1,XSI2,XSI3,XSI4):

  1.276846  4.026243  3.005422    0.704611  0.276846  0.013121  0.005422
  1.483792  4.043335  3.003048    0.491492  0.483792  0.021668  0.003048
  1.147942  4.011396  3.132170    0.714190  0.147942  0.005698  0.132170
  1.577139  4.005384  3.007748    0.412421  0.577139  0.002692  0.007748
  1.260471  4.183563  3.210141    0.437606  0.260471  0.091781  0.210141
  1.200389  4.059440  3.008237    0.761653  0.200389  0.029720  0.008237
  1.009319  4.007877  3.007288    0.979455  0.009319  0.003938  0.007288
  1.030814  4.001873  3.008596    0.959653  0.030814  0.000936  0.008596
  1.190384  4.026479  3.014955    0.781422  0.190384  0.013240  0.014955
  1.746054  4.039228  3.026062    0.208270  0.746054  0.019614  0.026062

tetrahedron_volume_test():
  tetrahedron_volume() computes the volume of a tetrahedron

  Tetrahedron vertices

  Row:       0             1             2       
  Col
      0 :           0      0.942809     -0.333333  
      1 :   -0.816496     -0.816496     -0.333333  
      2 :    0.816496     -0.816496     -0.333333  
      3 :           0             0             1  

  Volume = 0.638429

triangle_angles_test():
  triangle_angles() computes the angles of a triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             1  
      1 :           0             0  
      2 :           1             0  

      Radians      Degrees

      0.785398            45
        1.5708            90
      0.785398            45

triangle_area_test():
  triangle_area() computes the area of a triangle.

  Triangle vertices (columns)

  Col:       0             1             2       
  Row
      0 :           0             0             1  
      1 :           1             0             0  

  Triangle area is 0.5

triangle_barycentric_test():
  triangle_barycentric() converts XY coordinates
  to barycentric XSI coordinates in a triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             1  
      1 :           0             0  
      2 :           1             0  

   X       Y     XSI

    0.250000    0.250000      0.500000    0.250000    0.250000
    0.750000    0.250000      0.000000    0.750000    0.250000
    1.000000    1.000000     -1.000000    1.000000    1.000000
   11.000000    0.500000    -10.500000   11.000000    0.500000
    0.000000    1.000000     -0.000000    0.000000    1.000000
    0.500000  -10.000000     10.500000    0.500000  -10.000000
    0.600000    0.600000     -0.200000    0.600000    0.600000

triangle_centroid_test():
  triangle_centroid() computes the centroid of a triangle

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :           0             1  

  triangle centroid:
[0.33333333 0.33333333]

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :         0.5      0.866025  

  triangle centroid:
[0.5        0.28867513]

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :         0.5            10  

  triangle centroid:
[0.5        3.33333333]

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :          10             2  

  triangle centroid:
[3.66666667 0.66666667]

triangle_circumcircle_test():
  triangle_circumcircle() computes the circumcenter of a triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :           0             1  

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :           0             1  

  triangle_circumcenter:
[0.5 0.5]

  Circumradius: 0.707107

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :         0.5      0.866025  

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :         0.5      0.866025  

  triangle_circumcenter:
[0.5        0.28867513]

  Circumradius: 0.57735

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :         0.5            10  

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :         0.5            10  

  triangle_circumcenter:
[0.5    4.9875]

  Circumradius: 5.0125

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :          10             2  

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :          10             2  

  triangle_circumcenter:
[ 0.5 23.5]

  Circumradius: 23.5053

triangle_contains_point_test()
  triangle_contains_point() reports if a point
  is inside a triangle

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             1  
      1 :           0             0  
      2 :           1             0  

     X       Y     Inside

        0.25        0.25  True
        0.75        0.25  True
           1           1  False
          11         0.5  False
           0           1  True
         0.5         -10  False
         0.6         0.6  False

  Repeat the test, but reverse the triangle vertex ordering.

  Triangle vertices (reversed):

  Row:       0             1       
  Col
      0 :           1             0  
      1 :           0             0  
      2 :           0             1  

     X       Y     Inside

        0.25        0.25  False
        0.75        0.25  False
           1           1  False
          11         0.5  False
           0           1  False
         0.5         -10  False
         0.6         0.6  False

triangle_contains_point_1_test()
  triangle_contains_point_1() reports if a point
  is inside a triangle

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             1  
      1 :           0             0  
      2 :           1             0  

     X       Y     Inside

        0.25        0.25  True
        0.75        0.25  True
           1           1  False
          11         0.5  False
           0           1  True
         0.5         -10  False
         0.6         0.6  False

  Repeat the test, but reverse the triangle vertex ordering.

  Triangle vertices (reversed):

  Row:       0             1       
  Col
      0 :           1             0  
      1 :           0             0  
      2 :           0             1  

     X       Y     Inside

        0.25        0.25  True
        0.75        0.25  True
           1           1  False
          11         0.5  False
           0           1  True
         0.5         -10  False
         0.6         0.6  False

triangle_diameter_test():
  triangle_diameter() computes the diameter of
  the SMALLEST circle around a triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           4             2  
      1 :           1             5  
      2 :          -2             2  

  Diameter = 6

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           4             2  
      1 :           5             4  
      2 :           6             6  

  Diameter = 4.47214

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           4             2  
      1 :           1             5  
      2 :           4             2  

  Diameter = 4.24264

triangle_edge_length_test():
  triangle_edge_length() computes the edge lengths
  of a triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           4             2  
      1 :           1             5  
      2 :          -2             2  

  triangle edge lengths:
[4.24264069 4.24264069 6.        ]

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           4             2  
      1 :           5             4  
      2 :           6             6  

  triangle edge lengths:
[2.23606798 2.23606798 4.47213595]

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           4             2  
      1 :           1             5  
      2 :           4             2  

  triangle edge lengths:
[4.24264069 4.24264069 0.        ]

triangle_incircle_test():
  triangle_incircle() computes the incircle of a triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             1  
      1 :           0             0  
      2 :           1             0  

  triangle incenter:
[0.29289322 0.29289322]

  Incircle radius is 0.292893

triangle_orientation_test():
  triangle_orientation() determines orientation of a triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           4             2  
      1 :           1             5  
      2 :          -2             2  

  The points are counterclockwise.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           1             5  
      1 :           4             2  
      2 :           1            -1  

  The points are clockwise.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           1             5  
      1 :           2             7  
      2 :           3             9  

  The points are colinear.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           1             5  
      1 :           4             2  
      2 :           1             5  

  The points are not distinct.

triangle_orthocenter_test():
  triangle_orthocenter() computes the orthocenter of a triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :           0             1  

  triangle orthocenter:
[0. 0.]

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :         0.5      0.866025  

  triangle orthocenter:
[0.5        0.28867514]

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :         0.5            10  

  triangle orthocenter:
[0.5   0.025]

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :          10             2  

  triangle orthocenter:
[ 10. -45.]

triangle_point_dist_test():
  triangle_point_dist() computes the distance
  between a point and a triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             1  
      1 :           0             0  
      2 :           1             0  

       P       DIST

        0.25        0.25        0.25
        0.75        0.25           0
           1           1    0.707107
          11         0.5     10.0125
           0           1           0
         0.5         -10          10
         0.6         0.6    0.141421

triangle_point_near_test():
  triangle_point_near() computes the nearest
  triangle point to a point.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             1  
      1 :           0             0  
      2 :           1             0  

           P                PN

        0.25        0.25             0        0.25
        0.75        0.25          0.75        0.25
           1           1           0.5         0.5
          11         0.5             1           0
           0           1             0           1
         0.5         -10           0.5           0
         0.6         0.6           0.5         0.5

triangle_quality_test():
  triangle_quality() computes the quality of a triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :           0             1  

  Quality = 0.828427

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :         0.5      0.866025  

  Quality = 1

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :         0.5            10  

  Quality = 0.189775

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :          10             2  

  Quality = 0.00833469

triangle_reference_sample_test():
  triangle_reference_sample() samples the reference triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             0  
      1 :           1             0  
      2 :           0             1  

  Sample points (X,Y) and (XSI1,XSI2,XSI3) coordinates:

    0.755238    0.153195     0.0915671    0.755238    0.153195
    0.424423    0.220318      0.355259    0.424423    0.220318
   0.0388513    0.375428      0.585721   0.0388513    0.375428
    0.170623    0.418778      0.410599    0.170623    0.418778
    0.905767   0.0312805     0.0629529    0.905767   0.0312805
   0.0357154    0.588034      0.376251   0.0357154    0.588034
  0.00965712    0.735478      0.254865  0.00965712    0.735478
    0.481503    0.498528     0.0199694    0.481503    0.498528
    0.267446    0.429457      0.303096    0.267446    0.429457
  0.00136058   0.0747055      0.923934  0.00136058   0.0747055

triangle_sample_test():
  triangle_sample() samples a triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           4             2  
      1 :           1             5  
      2 :          -2             2  

  Sample points (X,Y) and (XSI1,XSI2,XSI3) coordinates:

     2.20927     3.24183      0.494572    0.413945   0.0914828
  -0.0622719     3.80662     0.0218511    0.602207    0.375942
     1.06193     3.49325      0.261447    0.497751    0.240802
     1.23623     3.47168      0.294092     0.49056    0.215348
    0.361441     2.04338      0.386344   0.0144598    0.599197
    0.906833     2.98235      0.320748    0.327449    0.351804
     3.06551     2.80616      0.709891    0.268722   0.0213876
     1.04003     3.14644      0.315598    0.382146    0.302256
   -0.290097     3.55148     0.0264037     0.51716    0.456436
   -0.578045     2.88239     0.0899275     0.29413    0.615942

triangle_xsi_to_xy_test():
  triangle_xsi_to_xy() converts XSI to XY coordinates.

  We verify that (X,Y) -> (XSI1,XSI2,XSI3) -> (X,Y)
  works properly.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           4             2  
      1 :           1             5  
      2 :          -2             2  

  Sample points:


         1         3    0.333333  0.333333  0.333333
         1         3

         3         0     1.16667  -0.666667       0.5
         3  2.22045e-16

   2.31711   2.96843    0.558113  0.322811  0.119076
   2.31711   2.96843

  -0.55212   2.72961    0.119711  0.243204  0.637085
  -0.55212   2.72961

  0.909931   2.35199    0.426323   0.11733  0.456346
  0.909931   2.35199

  -0.594334   2.63272    0.128824  0.210907  0.660269
  -0.594334   2.63272

   2.64088   2.04714    0.765622  0.0157139  0.218664
   2.64088   2.04714

  0.698197   4.08475    0.102241  0.694917  0.202842
  0.698197   4.08475

   2.96456   2.73918     0.70423  0.246393  0.0493774
   2.96456   2.73918

   1.30188   4.64278     0.10985  0.880928  0.00922194
   1.30188   4.64278

triangle_xy_to_xsi_test():
  triangle_xy_to_xsi() converts XY to XSI coordinates.
  Verify that (X,Y) -> (XSI1,XSI2,XSI3) -> (X,Y)
  works properly.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           4             2  
      1 :           1             5  
      2 :          -2             2  

  Sample points:


         1         3    0.333333  0.333333  0.333333
         1         3

         3         0     1.16667  -0.666667       0.5
         3  2.22045e-16

   2.04136   3.58316    0.409699  0.527721  0.0625797
   2.04136   3.58316

   3.24647    2.5007    0.790962    0.1669  0.0421381
   3.24647    2.5007

   1.14397   3.05908    0.347482  0.353026  0.299491
   1.14397   3.05908

  0.521821   3.02724    0.249097  0.342413   0.40849
  0.521821   3.02724

   2.14676   3.77744    0.394887  0.592479  0.0126347
   2.14676   3.77744

  0.868414   3.63505     0.20556  0.545018  0.249422
  0.868414   3.63505

   2.41277   2.39916    0.668936  0.133052  0.198012
   2.41277   2.39916

   2.60196   3.01717    0.597464  0.339058  0.0634784
   2.60196   3.01717

triangle01_area_test():
  triangle01_area() computes the area of the unit triangle.

  Triangle vertices (columns)

  Col:       0             1             2       
  Row
      0 :           0             0             1  
      1 :           1             0             0  

  Triangle area is 0.5

triangle01_sample_test():
  triangle01_sample() samples the unit triangle.

  Triangle vertices:

  Row:       0             1       
  Col
      0 :           0             1  
      1 :           0             0  
      2 :           1             0  

  Sample points (X,Y):


  Sample points:

  Row:       0             1       
  Col
      0 :    0.226826     0.0402524  
      1 :    0.692114       0.16809  
      2 :    0.317094      0.437236  
      3 :    0.246997      0.525741  
      4 :    0.527702      0.140288  
      5 :    0.216855      0.271176  
      6 :    0.230851      0.764418  
      7 :     0.60974     0.0671051  
      8 :    0.340167      0.389269  
      9 :    0.487495      0.135799  

triangle_3d_area_cross_product_test():
  triangle_3d_area_cross_product() computes the area
  of a triangle in 3D.

  Triangle vertices:
[[1.        2.        3.       ]
 [2.4142137 3.4142137 3.       ]
 [1.7071068 2.7071068 4.       ]]

  Computed area is  1.0000000973169176

triangle_3d_area_heron_test():
  triangle_3d_area_heron() computes the area
  of a triangle in 3D.

  Triangle vertices:
[[1.        2.        3.       ]
 [2.4142137 3.4142137 3.       ]
 [1.7071068 2.7071068 4.       ]]

  Computed area is  1.0000000973169179

wedge01_volume_test():
  wedge01_volume() returns the volume of the unit wedge.

  wedge01_volume() = 1

geometry_test():
  Normal end of execution.
Thu Jul 21 18:28:29 2022
