function [ n_data, j1, j2, j3, j4, j5, j6, j7, j8, j9, fx ] = nine_j_values ...
  ( n_data )

%*****************************************************************************80
%
%% nine_j_values() returns some values of the Wigner 9J function.
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    09 February 2007
%
%  Author:
%
%    John Burkardt
%
%  Reference:
%
%    Milton Abramowitz, Irene Stegun,
%    Handbook of Mathematical Functions,
%    National Bureau of Standards, 1964,
%    ISBN: 0-486-61272-4,
%    LC: QA47.A34.
%
%  Input:
%
%    integer N_DATA.  The user sets N_DATA to 0 before the first call.  
%    Thereafter, it should simply be the value returned by the previous call.
%
%  Output:
%
%    integer N_DATA.  On each call, the routine increments N_DATA by 1, and
%    returns the corresponding data; when there is no more data, the
%    output value of N_DATA will be 0 again.
%
%    real J1, J2, J3, J4, J5, J6, J7, J8, J9,
%    the arguments of the function.
%
%    real FX, the value of the function.
%
  n_max = 9;

  fx_vec = [ ...
     0.0004270039294528318, ...
    -0.001228915451058514, ...
    -0.0001944260688400887, ...
     0.003338419923885592, ...
    -0.0007958936865080434, ...
    -0.004338208690251972, ...
     0.05379143536399187, ...
     0.006211299937499411, ...
     0.03042903097250921 ];
  j1_vec = [ ...
    1.0, ...
    1.5, ...
    2.0, ...
    1.0, ...
    1.5, ...
    2.0, ...
    0.5, ...
    1.0, ...
    1.5  ];
  j2_vec = [ ...
    8.0, ...
    8.0, ...
    8.0, ...
    3.0, ...
    3.0, ...
    3.0, ...
    0.5, ...
    0.5, ...
    0.5  ];
  j3_vec = [ ...
    7.0, ...
    7.0, ...
    7.0, ...
    2.0, ...
    2.0, ...
    2.0, ...
    1.0, ...
    1.0, ...
    1.0 ];
  j4_vec = [ ...
    6.5, ...
    6.5, ...
    6.5, ...
    4.0, ...
    4.0, ...
    4.0, ...
    2.0, ...
    2.0, ...
    2.0 ];
  j5_vec = [ ...
    7.5, ...
    7.5, ...
    7.5, ...
    1.5, ...
    1.5, ...
    1.5, ...
    1.0, ...
    1.0, ...
    1.0 ];
  j6_vec = [ ...
    7.5, ...
    7.5, ...
    7.5, ...
    3.0, ...
    3.0, ...
    3.0, ...
    1.5, ...
    1.5, ...
    1.5 ];
  j7_vec = [ ...
    6.0, ...
    6.0, ...
    6.0, ...
    3.5, ...
    3.5, ...
    3.5, ...
    1.5, ...
    1.5, ...
    1.5 ];
  j8_vec = [ ...
    10.0, ...
    10.0, ...
    10.0, ...
     2.0, ...
     2.0, ...
     2.0, ...
     0.5, ...
     0.5, ...
     0.5 ];
  j9_vec = [ ...
    6.0, ...
    6.0, ...
    6.0, ...
    2.0, ...
    2.0, ...
    2.0, ...
    1.5, ...
    1.5, ...
    1.5 ];

  if ( n_data < 0 )
    n_data = 0;
  end

  n_data = n_data + 1;

  if ( n_max < n_data )
    n_data = 0;
    j1 = 0.0;
    j2 = 0.0;
    j3 = 0.0;
    j4 = 0.0;
    j5 = 0.0;
    j6 = 0.0;
    j7 = 0.0;
    j8 = 0.0;
    j9 = 0.0;
    fx = 0.0;
  else
    j1 = j1_vec(n_data);
    j2 = j2_vec(n_data);
    j3 = j3_vec(n_data);
    j4 = j4_vec(n_data);
    j5 = j5_vec(n_data);
    j6 = j6_vec(n_data);
    j7 = j7_vec(n_data);
    j8 = j8_vec(n_data);
    j9 = j9_vec(n_data);
    fx = fx_vec(n_data);
  end

  return
end
