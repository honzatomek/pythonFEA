function [ n_data, x, fx ] = synch2_values ( n_data )

%*****************************************************************************80
%
%% synch2_values() returns some values of the synchrotron radiation function.
%
%  Discussion:
%
%    The function is defined by:
%
%      SYNCH2(x) = x * K(2/3)(x)
%
%    where K(2/3) is a modified Bessel function of order 2/3.
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    19 September 2004
%
%  Author:
%
%    John Burkardt
%
%  Reference:
%
%    Milton Abramowitz and Irene Stegun,
%    Handbook of Mathematical Functions,
%    US Department of Commerce, 1964.
%
%    Allan McLeod,
%    Algorithm 757, MISCFUN: A software package to compute uncommon
%      special functions,
%    ACM Transactions on Mathematical Software,
%    Volume 22, Number 3, September 1996, pages 288-301.
%
%    Stephen Wolfram,
%    The Mathematica Book,
%    Fourth Edition,
%    Wolfram Media / Cambridge University Press, 1999.
%
%  Input:
%
%    integer N_DATA.  The user sets N_DATA to 0 before the first call.  
%    Thereafter, it should simply be the value returned by the previous call.
%
%  Output:
%
%    integer N_DATA.  On each call, the routine increments N_DATA by 1, and
%    returns the corresponding data; when there is no more data, the
%    output value of N_DATA will be 0 again.
%
%    real X, the argument of the function.
%
%    real FX, the value of the function.
%
  n_max = 20;

  fx_vec = [ ...
     0.13430727275667378338E+00, ...
     0.33485265272424176976E+00, ...
     0.50404224110911078651E+00, ...
     0.60296523236016785113E+00, ...
     0.49447506210420826699E+00, ...
     0.36036067860473360389E+00, ...
     0.24967785497625662113E+00, ...
     0.16813830542905833533E+00, ...
     0.11117122348556549832E+00, ...
     0.46923205826101330711E-01, ...
     0.37624545861980001482E-01, ...
     0.19222123172484106436E-01, ...
     0.12209535343654701398E-01, ...
     0.77249644268525771866E-02, ...
     0.12029044213679269639E-02, ...
     0.18161187569530204281E-03, ...
     0.26884338006629353506E-04, ...
     0.14942212731345828759E-05, ...
     0.11607696854385161390E-07, ...
     0.87362343746221526073E-10 ];

  x_vec = [ ...
       0.0019531250E+00, ...
       0.0312500000E+00, ...
       0.1250000000E+00, ...
       0.5000000000E+00, ...
       1.0000000000E+00, ...
       1.5000000000E+00, ...
       2.0000000000E+00, ...
       2.5000000000E+00, ...
       3.0000000000E+00, ...
       4.0000000000E+00, ...
       4.2500000000E+00, ...
       5.0000000000E+00, ...
       5.5000000000E+00, ...
       6.0000000000E+00, ...
       8.0000000000E+00, ...
      10.0000000000E+00, ...
      12.0000000000E+00, ...
      15.0000000000E+00, ...
      20.0000000000E+00, ...
      25.0000000000E+00 ];

  if ( n_data < 0 )
    n_data = 0;
  end

  n_data = n_data + 1;

  if ( n_max < n_data )
    n_data = 0;
    x = 0.0;
    fx = 0.0;
  else
    x = x_vec(n_data);
    fx = fx_vec(n_data);
  end

  return
end
