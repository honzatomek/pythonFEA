function [ n_data, n, fn ] = r8_factorial_values ( n_data )

%*****************************************************************************80
%
%% r8_factorial_values() returns values of the real factorial function.
%
%  Discussion:
%
%    0! = 1
%    I! = Product ( 1 <= J <= I ) J
%
%    Although the factorial is an integer valued function, it quickly
%    becomes too large for an integer to hold.  This routine still accepts
%    an integer as the input argument, but returns the function value
%    as a real number.
%
%    In Mathematica, the function can be evaluated by:
%
%      n!
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    29 September 2004
%
%  Author:
%
%    John Burkardt
%
%  Reference:
%
%    Milton Abramowitz and Irene Stegun,
%    Handbook of Mathematical Functions,
%    US Department of Commerce, 1964.
%
%    Stephen Wolfram,
%    The Mathematica Book,
%    Fourth Edition,
%    Wolfram Media / Cambridge University Press, 1999.
%
%  Input:
%
%    integer N_DATA.  The user sets N_DATA to 0 before the first call.  
%    Thereafter, it should simply be the value returned by the previous call.
%
%  Output:
%
%    integer N_DATA.  On each call, the routine increments N_DATA by 1, and
%    returns the corresponding data; when there is no more data, the
%    output value of N_DATA will be 0 again.
%
%    integer N, the argument of the function.
%
%    real FN, the value of the function.
%
  n_max = 25;

  fn_vec = [ ...
     0.1000000000000000E+01, ...
     0.1000000000000000E+01, ...
     0.2000000000000000E+01, ...
     0.6000000000000000E+01, ...
     0.2400000000000000E+02, ... 
     0.1200000000000000E+03, ...
     0.7200000000000000E+03, ...
     0.5040000000000000E+04, ...
     0.4032000000000000E+05, ...
     0.3628800000000000E+06, ...
     0.3628800000000000E+07, ...
     0.3991680000000000E+08, ...
     0.4790016000000000E+09, ...
     0.6227020800000000E+10, ...
     0.8717829120000000E+11, ...
     0.1307674368000000E+13, ...
     0.2092278988800000E+14, ...
     0.3556874280960000E+15, ...
     0.6402373705728000E+16, ...
     0.1216451004088320E+18, ...
     0.2432902008176640E+19, ...
     0.1551121004333099E+26, ...
     0.3041409320171338E+65, ...
     0.9332621544394415E+158, ...
     0.5713383956445855E+263 ];

  n_vec = [ ...
       0, ...
       1, ...
       2, ...
       3, ...
       4, ...
       5, ...
       6, ...
       7, ...
       8, ...
       9, ...
      10, ...
      11, ...
      12, ...
      13, ...
      14, ...
      15, ...
      16, ...
      17, ...
      18, ...
      19, ...
      20, ...
      25, ...
      50, ...
     100, ...
     150 ];

  if ( n_data < 0 )
    n_data = 0;
  end

  n_data = n_data + 1;

  if ( n_max < n_data )
    n_data = 0;
    n = 0;
    fn = 0.0;
  else
    n = n_vec(n_data);
    fn = fn_vec(n_data);
  end

  return
end
