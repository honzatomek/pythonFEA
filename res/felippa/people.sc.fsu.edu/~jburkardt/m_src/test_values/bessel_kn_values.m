function [ n_data, nu, x, fx ] = bessel_kn_values ( n_data )

%*****************************************************************************80
%
%% bessel_kn_values() returns some values of the Kn Bessel function.
%
%  Discussion:
%
%    The modified Bessel functions In(Z) and Kn(Z) are solutions of
%    the differential equation
%
%      Z^2 * W'' + Z * W' - ( Z^2 + N^2 ) * W = 0.
%
%    In Mathematica, the function can be evaluated by:
%
%      BesselK[n,x]
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    29 September 2004
%
%  Author:
%
%    John Burkardt
%
%  Reference:
%
%    Milton Abramowitz and Irene Stegun,
%    Handbook of Mathematical Functions,
%    US Department of Commerce, 1964.
%
%    Stephen Wolfram,
%    The Mathematica Book,
%    Fourth Edition,
%    Wolfram Media / Cambridge University Press, 1999.
%
%  Input:
%
%    integer N_DATA.  The user sets N_DATA to 0 before the first call.  
%    Thereafter, it should simply be the value returned by the previous call.
%
%  Output:
%
%    integer N_DATA.  On each call, the routine increments N_DATA by 1, and
%    returns the corresponding data; when there is no more data, the
%    output value of N_DATA will be 0 again.
%
%    integer NU, the order of the function.
%
%    real X, the argument of the function.
%
%    real FX, the value of the function.
%
  n_max = 28;

  fx_vec = [ ...
     0.4951242928773287E+02, ...
     0.1624838898635177E+01, ...
     0.2537597545660559E+00, ...
     0.1214602062785638E+00, ...
     0.6151045847174204E-01, ...
     0.5308943712223460E-02, ...
     0.2150981700693277E-04, ...
     0.6329543612292228E-09, ...
     0.7101262824737945E+01, ...
     0.6473853909486342E+00, ...
     0.8291768415230932E-02, ...
     0.2725270025659869E-04, ...
     0.3727936773826211E-22, ...
     0.3609605896012407E+03, ...
     0.9431049100596467E+01, ...
     0.3270627371203186E-01, ...
     0.5754184998531228E-04, ...
     0.4367182254100986E-22, ...
     0.1807132899010295E+09, ...
     0.1624824039795591E+06, ...
     0.9758562829177810E+01, ...
     0.1614255300390670E-02, ...
     0.9150988209987996E-22, ...
     0.6294369360424535E+23, ...
     0.5770856852700241E+17, ...
     0.4827000520621485E+09, ...
     0.1787442782077055E+03, ...
     0.1706148379722035E-20 ];

  nu_vec = [ ...
     2,  2,  2,  2, ...
     2,  2,  2,  2, ...
     3,  3,  3,  3, ...
     3,  5,  5,  5, ...
     5,  5, 10, 10, ...
    10, 10, 10, 20, ...
    20, 20, 20, 20 ];

  x_vec = [ ...
      0.2E+00, ...
      1.0E+00, ... 
      2.0E+00, ...
      2.5E+00, ...
      3.0E+00, ...
      5.0E+00, ...
     10.0E+00, ...
     20.0E+00, ...
      1.0E+00, ... 
      2.0E+00, ...
      5.0E+00, ...
     10.0E+00, ...
     50.0E+00, ...
      1.0E+00, ...
      2.0E+00, ...
      5.0E+00, ...
     10.0E+00, ...
     50.0E+00, ...
      1.0E+00, ...
      2.0E+00, ...
      5.0E+00, ...
     10.0E+00, ...
     50.0E+00, ...
      1.0E+00, ...
      2.0E+00, ...
      5.0E+00, ...
     10.0E+00, ...
     50.0E+00 ];

  if ( n_data < 0 )
    n_data = 0;
  end

  n_data = n_data + 1;

  if ( n_max < n_data )
    n_data = 0;
    nu = 0;
    x = 0.0;
    fx = 0.0;
  else
    nu = nu_vec(n_data);
    x = x_vec(n_data);
    fx = fx_vec(n_data);
  end

  return
end
