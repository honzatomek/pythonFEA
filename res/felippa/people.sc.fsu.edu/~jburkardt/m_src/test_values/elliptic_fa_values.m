function [ n_data, x, fx ] = elliptic_fa_values ( n_data )

%*****************************************************************************80
%
%% elliptic_fa_values() returns values of the complete elliptic integral F(A).
%
%  Discussion:
%
%    This is one form of what is sometimes called the complete elliptic integral
%    of the first kind.
%
%    The function is defined by the formula:
%
%      F(A) = integral ( 0 <= T <= PI/2 ) 
%        dT / sqrt ( 1 - sin^2 ( A ) * sin^2 ( T ) )
%
%    In Mathematica, the function can be evaluated by:
%
%      EllipticK[(Sin[A*Pi/180])^2]
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    16 September 2004
%
%  Author:
%
%    John Burkardt
%
%  Reference:
%
%    Milton Abramowitz and Irene Stegun,
%    Handbook of Mathematical Functions,
%    US Department of Commerce, 1964.
%
%    Stephen Wolfram,
%    The Mathematica Book,
%    Fourth Edition,
%    Wolfram Media / Cambridge University Press, 1999.
%
%  Input:
%
%    integer N_DATA.  The user sets N_DATA to 0 before the first call.  
%    Thereafter, it should simply be the value returned by the previous call.
%
%  Output:
%
%    integer N_DATA.  On each call, the routine increments N_DATA by 1, and
%    returns the corresponding data; when there is no more data, the
%    output value of N_DATA will be 0 again.
%
%    real X, the argument of the function, measured 
%    in degrees.
%
%    real FX, the value of the function.
%
  n_max = 18;

  fx_vec = [ ...
     0.1570796326794897E+01, ...
     0.1573792130924768E+01, ...
     0.1582842804338351E+01, ...
     0.1598142002112540E+01, ...
     0.1620025899124204E+01, ...
     0.1648995218478530E+01, ...
     0.1685750354812596E+01, ...
     0.1731245175657058E+01, ...
     0.1786769134885021E+01, ...
     0.1854074677301372E+01, ...
     0.1935581096004722E+01, ...
     0.2034715312185791E+01, ...
     0.2156515647499643E+01, ...
     0.2308786798167196E+01, ...
     0.2504550079001634E+01, ...
     0.2768063145368768E+01, ...
     0.3153385251887839E+01, ...
     0.3831741999784146E+01 ];

  x_vec = [ ...
      0.0E+00, ...
      5.0E+00, ... 
     10.0E+00, ...
     15.0E+00, ...
     20.0E+00, ...
     25.0E+00, ...
     30.0E+00, ...
     35.0E+00, ...
     40.0E+00, ...
     45.0E+00, ...
     50.0E+00, ...
     55.0E+00, ...
     60.0E+00, ...
     65.0E+00, ...
     70.0E+00, ...
     75.0E+00, ...
     80.0E+00, ...
     85.0E+00 ];

  if ( n_data < 0 )
    n_data = 0;
  end

  n_data = n_data + 1;

  if ( n_max < n_data )
    n_data = 0;
    x = 0.0;
    fx = 0.0;
  else
    x = x_vec(n_data);
    fx = fx_vec(n_data);
  end

  return
end
