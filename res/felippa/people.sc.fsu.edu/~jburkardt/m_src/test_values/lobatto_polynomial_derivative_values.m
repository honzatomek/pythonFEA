function [ n_data, n, x, fx ] = lobatto_polynomial_derivative_values ( n_data )

%*****************************************************************************80
%
%% lobatto_polynomial_derivative_values(): derivatives of completed Lobatto polynomials.
%
%  Discussion:
%
%    In Mathematica, the completed Lobatto polynomial can be evaluated by:
%
%      n * LegendreP [ n - 1, x ] - n * x * LegendreP [ n, x ]
%
%    The derivative is:
%
%        n * D[LegendreP [ n - 1, x ], {x} ] 
%      - n * LegendreP [ n, x ] 
%      - n * x * D[LegendreP [ n, x ], {x}]
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    18 November 2014
%
%  Author:
%
%    John Burkardt
%
%  Reference:
%
%    Milton Abramowitz and Irene Stegun,
%    Handbook of Mathematical Functions,
%    US Department of Commerce, 1964.
%
%    Stephen Wolfram,
%    The Mathematica Book,
%    Fourth Edition,
%    Wolfram Media / Cambridge University Press, 1999.
%
%  Input:
%
%    integer N_DATA.  The user sets N_DATA to 0 before the first call.  
%    Thereafter, it should simply be the value returned by the previous call.
%
%  Output:
%
%    integer N_DATA.  On each call, the routine increments N_DATA by 1, and
%    returns the corresponding data; when there is no more data, the
%    output value of N_DATA will be 0 again.
%
%    integer N, the order of the function.
%
%    real X, the point where the function is evaluated.
%
%    real FX, the value of the function.
%
  n_max = 31;

  fx_vec = [ ...
     -0.5, ...
      2.437500000000000, ...
      4.031250000000000, ...
     -3.154296875000000, ...
    -10.19165039062500, ...
     -1.019622802734375, ...
     15.67544555664063, ...
     10.97668933868408, ...
    -15.91419786214828, ...
    -24.33202382177114, ...
     12.00000000000000, ...
      5.670000000000000, ...
      0.9600000000000000, ...
     -2.310000000000000, ...
     -4.320000000000000, ...
     -5.250000000000000, ...
     -5.280000000000000, ...
     -4.590000000000000, ...
     -3.360000000000000, ...
     -1.770000000000000, ...
      0.0, ...
      1.770000000000000, ...
      3.360000000000000, ...
      4.590000000000000, ...
      5.280000000000000, ...
      5.250000000000000, ...
      4.320000000000000, ...
      2.310000000000000, ...
     -0.9600000000000000, ...
     -5.670000000000000, ...
    -12.00000000000000 ];

  n_vec = [ ...
     1,  2, ...
     3,  4,  5, ...
     6,  7,  8, ...
     9, 10,  3, ...
     3,  3,  3, ...
     3,  3,  3, ...
     3,  3,  3, ...
     3,  3,  3, ...
     3,  3,  3, ...
     3,  3,  3, ...
     3,  3 ];

  x_vec = [ ...
    0.25, ...
    0.25, ...
    0.25, ...
    0.25, ...
    0.25, ...
    0.25, ...
    0.25, ...
    0.25, ...
    0.25, ...
    0.25, ...
   -1.00, ...
   -0.90, ...
   -0.80, ...
   -0.70, ...
   -0.60, ...
   -0.50, ...
   -0.40, ...
   -0.30, ...
   -0.20, ...
   -0.10, ...
    0.00, ...
    0.10, ...
    0.20, ...
    0.30, ...
    0.40, ...
    0.50, ...
    0.60, ...
    0.70, ...
    0.80, ...
    0.90, ...
    1.00 ];

  if ( n_data < 0 )
    n_data = 0;
  end

  n_data = n_data + 1;

  if ( n_max < n_data )
    n_data = 0;
    n = 0;
    x = 0.0;
    fx = 0.0;
  else
    n = n_vec(n_data);
    x = x_vec(n_data);
    fx = fx_vec(n_data);
  end

  return
end
