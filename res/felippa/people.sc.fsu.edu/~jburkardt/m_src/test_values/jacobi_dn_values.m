function [ n_data, u, a, k, m, fx ] = jacobi_dn_values ( n_data )

%*****************************************************************************80
%
%% jacobi_dn_values() returns some values of the Jacobi elliptic function DN(U,M).
%
%  Discussion:
%
%    In Mathematica, the function can be evaluated by:
%
%      JacobiDN[ u, m ]
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    19 November 2020
%
%  Author:
%
%    John Burkardt
%
%  Reference:
%
%    Milton Abramowitz and Irene Stegun,
%    Handbook of Mathematical Functions,
%    US Department of Commerce, 1964.
%
%    Stephen Wolfram,
%    The Mathematica Book,
%    Fourth Edition,
%    Wolfram Media / Cambridge University Press, 1999.
%
%  Input:
%
%    integer N_DATA.  The user sets N_DATA to 0 before the first call.  
%    Thereafter, it should simply be the value returned by the previous call.
%
%  Output:
%
%    integer N_DATA.  On each call, the routine increments N_DATA by 1, and
%    returns the corresponding data; when there is no more data, the
%    output value of N_DATA will be 0 again.
%
%    real U, the argument of the function.
%
%    real A, K, M, the parameter of the function.
%    K = sin ( A ), M = K^2.
%
%    real FX, the value of the function.
%
  n_max = 20;

  m_vec = [ ...
     0.0E+00, ...
     0.0E+00, ...
     0.0E+00, ...
     0.0E+00, ...
     0.0E+00, ...
     0.5E+00, ...
     0.5E+00, ...
     0.5E+00, ...
     0.5E+00, ...
     0.5E+00, ...
     1.0E+00, ...
     1.0E+00, ...
     1.0E+00, ...
     1.0E+00, ...
     1.0E+00, ...
     1.0E+00, ...
     1.0E+00, ...
     1.0E+00, ...
     1.0E+00, ...
     1.0E+00 ];

  fx_vec = [ ...
     0.1000000000000000E+01, ...
     0.1000000000000000E+01, ...
     0.1000000000000000E+01, ...
     0.1000000000000000E+01, ...
     0.1000000000000000E+01, ...
     0.9975093485144243E+00, ...
     0.9901483195224800E+00, ...
     0.9429724257773857E+00, ...
     0.8231610016315963E+00, ...
     0.7108610477840873E+00, ...
     0.9950207489532265E+00, ...
     0.9803279976447253E+00, ...
     0.8868188839700739E+00, ...
     0.6480542736638854E+00, ...
     0.2658022288340797E+00, ...
     0.3661899347368653E-01, ...
     0.9803279976447253E+00, ...
     0.8868188839700739E+00, ...
     0.6480542736638854E+00, ...
     0.2658022288340797E+00  ];

  u_vec = [ ...
      0.1E+00, ...
      0.2E+00, ... 
      0.5E+00, ...
      1.0E+00, ...
      2.0E+00, ...
      0.1E+00, ...
      0.2E+00, ...
      0.5E+00, ...
      1.0E+00, ...
      2.0E+00, ...
      0.1E+00, ...
      0.2E+00, ...
      0.5E+00, ...
      1.0E+00, ...
      2.0E+00, ...
      4.0E+00, ...
     -0.2E+00, ...
     -0.5E+00, ...
     -1.0E+00, ...
     -2.0E+00 ];

  if ( n_data < 0 )
    n_data = 0;
  end

  n_data = n_data + 1;

  if ( n_max < n_data )
    n_data = 0;
    a = 0.0;
    k = 0.0;
    m = 0.0;
    u = 0.0;
    fx = 0.0;
  else
    m = m_vec(n_data);
    k = sqrt ( m );
    a = asin ( k );
    u = u_vec(n_data);
    fx = fx_vec(n_data);
  end

  return
end
