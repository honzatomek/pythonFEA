function [ n_data, x, fx ] = bessel_y0_int_values ( n_data )

%*****************************************************************************80
%
%% bessel_y0_int_values() returns some values of the Bessel Y0 integral.
%
%  Discussion:
%
%    The function is defined by:
%
%      Y0_INT(x) = Integral ( 0 <= t <= x ) Y0(t) dt
%
%    The data was reported by McLeod.
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    30 August 2004
%
%  Author:
%
%    John Burkardt
%
%  Reference:
%
%    Allan McLeod,
%    Algorithm 757, MISCFUN: A software package to compute uncommon
%      special functions,
%    ACM Transactions on Mathematical Software,
%    Volume 22, Number 3, September 1996, pages 288-301.
%
%  Input:
%
%    integer N_DATA.  The user sets N_DATA to 0 before the first call.  
%    Thereafter, it should simply be the value returned by the previous call.
%
%  Output:
%
%    integer N_DATA.  On each call, the routine increments N_DATA by 1, and
%    returns the corresponding data; when there is no more data, the
%    output value of N_DATA will be 0 again.
%
%    real X, the argument of the function.
%
%    real FX, the value of the function.
%
  n_max = 20;

  fx_vec = [ ...
     -0.91442642860172110926E-02, ...
     -0.29682047390397591290E-01, ...
     -0.25391431276585388961E+00, ...
     -0.56179545591464028187E+00, ...
     -0.63706937660742309754E+00, ...
     -0.28219285008510084123E+00, ...
      0.38366964785312561103E+00, ...
     -0.12595061285798929390E+00, ...
      0.24129031832266684828E+00, ...
      0.17138069757627037938E+00, ...
      0.18958142627134083732E+00, ...
      0.17203846136449706946E+00, ...
     -0.16821597677215029611E+00, ...
     -0.93607927351428988679E-01, ...
      0.88229711948036648408E-01, ...
     -0.89324662736274161841E-02, ...
     -0.54814071000063488284E-01, ...
     -0.94958246003466381588E-01, ...
     -0.19598064853404969850E-01, ...
     -0.83084772357154773468E-02 ];

  x_vec = [ ...
       0.0019531250E+00, ...
       0.0078125000E+00, ...
       0.1250000000E+00, ...
       0.5000000000E+00, ...
       1.0000000000E+00, ...
       2.0000000000E+00, ...
       4.0000000000E+00, ...
       6.0000000000E+00, ...
      10.0000000000E+00, ...
      16.0000000000E+00, ...
      16.2500000000E+00, ...
      17.0000000000E+00, ...
      20.0000000000E+00, ...
      25.0000000000E+00, ...
      30.0000000000E+00, ...
      40.0000000000E+00, ...
      50.0000000000E+00, ...
      70.0000000000E+00, ...
     100.0000000000E+00, ...
     125.0000000000E+00 ];

  if ( n_data < 0 )
    n_data = 0;
  end

  n_data = n_data + 1;

  if ( n_max < n_data )
    n_data = 0;
    x = 0.0;
    fx = 0.0;
  else
    x = x_vec(n_data);
    fx = fx_vec(n_data);
  end

  return
end
