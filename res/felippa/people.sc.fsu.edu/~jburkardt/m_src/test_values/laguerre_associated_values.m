function [ n_data, n, m, x, fx ] = laguerre_associated_values ( n_data )

%*****************************************************************************80
%
%% laguerre_associated_values() returns some values of the associated Laguerre polynomials.
%
%  Discussion:
%
%    In Mathematica, the function can be evaluated by:
%
%      LaguerreL[n,m,x]
%
%    The associated Laguerre polynomials may be generalized so that the 
%    parameter M is allowed to take on arbitrary noninteger values.
%    The resulting function is known as the generalized Laguerre function.
%    
%    The polynomials satisfy the differential equation:
%
%      X * Y'' + (M+1-X) * Y' + (N-M) * Y = 0
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    19 September 2004
%
%  Author:
%
%    John Burkardt
%
%  Reference:
%
%    Stephen Wolfram,
%    The Mathematica Book,
%    Fourth Edition,
%    Wolfram Media / Cambridge University Press, 1999.
%
%  Input:
%
%    integer N_DATA.  The user sets N_DATA to 0 before the first call.  
%    Thereafter, it should simply be the value returned by the previous call.
%
%  Output:
%
%    integer N_DATA.  On each call, the routine increments N_DATA by 1, and
%    returns the corresponding data; when there is no more data, the
%    output value of N_DATA will be 0 again.
%
%    integer N, the order of the function.
%
%    integer M, the parameter.
%
%    real X, the point where the function is evaluated.
%
%    real FX, the value of the function.
%
  n_max = 20;

  fx_vec = [ ...
     0.1000000000000000E+01, ...
     0.1000000000000000E+01, ...
     0.1000000000000000E+01, ...
     0.1000000000000000E+01, ...
     0.1000000000000000E+01, ...
     0.1500000000000000E+01, ...
     0.1625000000000000E+01, ...
     0.1479166666666667E+01, ...
     0.1148437500000000E+01, ...
     0.4586666666666667E+00, ...
     0.2878666666666667E+01, ...
     0.8098666666666667E+01, ...
     0.1711866666666667E+02, ...
     0.1045328776041667E+02, ...
     0.1329019368489583E+02, ...
     0.5622453647189670E+02, ...
     0.7484729341779436E+02, ...
     0.3238912982762806E+03, ...
     0.4426100000097533E+03, ...
     0.1936876572288250E+04 ];

  m_vec = [ ...
    0, 0, 0, 0, ...
    0, 1, 1, 1, ...
    1, 0, 1, 2, ...
    3, 2, 2, 3, ...
    3, 4, 4, 5 ];

  n_vec = [ ...
    1,  2,  3,  4, ...
    5,  1,  2,  3, ...
    4,  3,  3,  3, ...
    3,  4,  5,  6, ...
    7,  8,  9, 10 ];

  x_vec = [ ...
     0.00E+00, ...
     0.00E+00, ...
     0.00E+00, ...
     0.00E+00, ...
     0.00E+00, ...
     0.50E+00, ...
     0.50E+00, ...
     0.50E+00, ...
     0.50E+00, ...
     0.20E+00, ...
     0.20E+00, ...
     0.20E+00, ...
     0.20E+00, ...
     0.25E+00, ...
     0.25E+00, ...
     0.25E+00, ...
     0.25E+00, ...
     0.25E+00, ...
     0.25E+00, ...
     0.25E+00 ];

  if ( n_data < 0 )
    n_data = 0;
  end

  n_data = n_data + 1;

  if ( n_max < n_data )
    n_data = 0;
    n = 0;
    m = 0;
    x = 0.0;
    fx = 0.0;
  else
    n = n_vec(n_data);
    m = m_vec(n_data);
    x = x_vec(n_data);
    fx = fx_vec(n_data);
  end

  return
end
