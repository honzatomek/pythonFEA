function triangulation_test05 ( )

%*****************************************************************************80
%
%% triangulation_test05 tests points_delaunay_naive_2d.
%
%  Diagram:
%
%   !....3&11....
%   !............
%   !............
%   X..9.........
%   !.....5......
%   !...........6
%   !.4.2...10...
%   !.....8...12.
%   V............
%   !..7.........
%   !......1.....
%   !............
%   !............
%   !----V----X--
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    24 August 2006
%
%  Author:
%
%    John Burkardt
%
  dim_num = 2;
  node_num = 12;

  node_xy = [ ...
     7.0,  3.0; ...
     4.0,  7.0; ...
     5.0, 13.0; ...
     2.0,  7.0; ...
     6.0,  9.0; ...
    12.0,  8.0; ...
     3.0,  4.0; ...
     6.0,  6.0; ...
     3.0, 10.0; ...
     8.0,  7.0; ...
     5.0, 13.0; ...
    10.0,  6.0 ]';

  fprintf ( 1, '\n' );
  fprintf ( 1, 'triangulation_test05\n' );
  fprintf ( 1, '  POINTS_DELAUNAY_NAIVE_2D computes the Delaunay\n' );
  fprintf ( 1, '  triangulation of a set of points.\n' );

  r8mat_transpose_print ( dim_num, node_num, node_xy, '  The points:' );

  [ triangle_num, triangle_node ] = points_delaunay_naive_2d ( ...
    node_num, node_xy );

  fprintf ( 1, '\n' );
  fprintf ( 1, '  The number of triangles is %d\n', triangle_num );

  i4mat_transpose_print ( 3, triangle_num, triangle_node, ...
    '  The Delaunay triangles:' );

  return
end
