function [ n_data, x, n, f ] = r8_rise_values ( n_data )

%*****************************************************************************80
%
%% r8_rise_values() returns some values of the rising factorial function.
%
%  Discussion:
%
%    Pochhammer(X,Y) = Gamma(X+Y) / Gamma(X)
%
%    For integer arguments, Pochhammer(M,N) = ( M + N - 1 )! / ( N - 1 )!
%
%    In Mathematica, the function can be evaluated by:
%
%      Pochhammer[X,Y]
%
%  Licensing:
%
%    This code is distributed under the GNU LGPL license.
%
%  Modified:
%
%    21 December 2014
%
%  Author:
%
%    John Burkardt
%
%  Reference:
%
%    Milton Abramowitz and Irene Stegun,
%    Handbook of Mathematical Functions,
%    US Department of Commerce, 1964.
%
%    Stephen Wolfram,
%    The Mathematica Book,
%    Fourth Edition,
%    Wolfram Media / Cambridge University Press, 1999.
%
%  Input:
%
%    integer N_DATA.  The user sets N_DATA to 0 before the
%    first call.  On each call, the routine increments N_DATA by 1, and
%    returns the corresponding data; when there is no more data, the
%    output value of N_DATA will be 0 again.
%
%  Output:
%
%    integer N_DATA.  The user sets N_DATA to 0 before the
%    first call.  On each call, the routine increments N_DATA by 1, and
%    returns the corresponding data; when there is no more data, the
%    output value of N_DATA will be 0 again.
%
%    real X, an argument of the function.
%
%    integer N, an argument of the function.
%
%    real F, the value of the function.
%
  n_max = 15;

  f_vec = [ ...
       1680.000000000000, ...
       1962.597656250000, ...
       2279.062500000000, ...
       2631.972656250000, ...
       3024.000000000000, ...
       1.000000000000000, ...
       7.500000000000000, ...
       63.75000000000000, ...
       605.6250000000000, ...
       6359.062500000000, ...
       73129.21875000000, ...
       914115.2343750000, ...
       1.234055566406250E+07, ...
       1.789380571289063E+08, ...
       2.773539885498047E+09 ];

  n_vec = [ ...
       4, ...
       4, ...
       4, ...
       4, ...
       4, ...
       0, ...
       1, ...
       2, ...
       3, ...
       4, ...
       5, ...
       6, ...
       7, ...
       8, ...
       9  ]; 

  x_vec = [ ...
       5.00, ...
       5.25, ...
       5.50, ...
       5.75, ...
       6.00, ...
       7.50, ...
       7.50, ...
       7.50, ...
       7.50, ...
       7.50, ...
       7.50, ...
       7.50, ...
       7.50, ...
       7.50, ...
       7.50 ];

  if ( n_data < 0 )
    n_data = 0;
  end

  n_data = n_data + 1;

  if ( n_max < n_data )
    n_data = 0;
    x = 0.0;
    n = 0;
    f = 0.0;
  else
    x = x_vec(n_data);
    n = n_vec(n_data);
    f = f_vec(n_data);
  end

  return
end
