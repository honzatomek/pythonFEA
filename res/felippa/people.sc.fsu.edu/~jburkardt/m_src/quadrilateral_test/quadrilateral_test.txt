26-Apr-2022 18:24:13

quadrilateral_test():
  MATLAB/Octave version 9.8.0.1380330 (R2020a) Update 2
  quadrilateral() contains functions for geometric computations
  involving quadrilaterals.

quadrilateral_angles_test():
  quadrilateral_angles() returns the angles of a quadrilateral
  in radians.

  quadrilateral vertices:
     0     1     1     0
     0     0     1     1


  angles:
    1.5708
    1.5708
    1.5708
    1.5708

  Angles sum to 6.28319

  quadrilateral vertices:
     0     1     2     0
     0     0     1     1


  angles:
    1.5708
    2.3562
    0.7854
    1.5708

  Angles sum to 6.28319

  quadrilateral vertices:
         0    1.0000    0.2500         0
         0         0    0.2500    1.0000


  angles:
    1.5708
    0.3218
    4.0689
    0.3218

  Angles sum to 6.28319

  quadrilateral vertices:
         0    1.0000   -0.5000         0
         0         0    0.5000    1.0000


  angles:
    1.5708
    0.3218
    5.1760
    5.4978

  Angles sum to 12.5664

quadrilateral_area_3d_test():
  quadrilateral_area_3d() finds the area of a quadrilateral
  in 3D.

  quadrilateral vertices:
     2     0     1     3
     2     0     1     3
     0     0     1     1


  Area is     2.828427
  Area by 2 calls to triangle_area_3d(): 2.828427

quadrilateral_area_test():
  quadrilateral_area  finds the area of a quadrilateral;
  quadrilateral_area2 finds the area of a quadrilateral;

  quadrilateral vertices:
     0     1     1     0
     0     0     1     1


  quadrilateral_area area is  1.000000
  quadrilateral_area2 area is 1.000000

quadrilateral_contains_point_test()
  quadrilateral_contains_point() tells if a point is inside
  a quadrilateral.

  quadrilateral vertices:
     0     1     1     0
     0     0     1     1


        P        Contains  Dist    Dist
                          Signed  Unsigned

      0.250000      0.250000  1
      0.750000      0.250000  1
      1.000000      1.000000  1
     11.000000      0.500000  0
      0.000000      0.500000  1
      0.500000    -10.000000  0
      2.000000      2.000000  0

quadrilateral_is_convex_test():
  quadrilateral_is_convex() is true if a quadrilateral is convex.

  quadrilateral vertices:
    0.3517    0.5853    0.9172    0.7572
    0.8308    0.5497    0.2858    0.7537

  quadrilateral_is_convex ( q ) = 1

  quadrilateral vertices:
    0.9027    0.4909    0.3377    0.3692
    0.9448    0.4893    0.9001    0.1112

  quadrilateral_is_convex ( q ) = 0

  quadrilateral vertices:
    0.6491    0.6477    0.5470    0.7447
    0.7317    0.4509    0.2963    0.1890

  quadrilateral_is_convex ( q ) = 0

  quadrilateral vertices:
    0.6225    0.2077    0.4709    0.8443
    0.5870    0.3012    0.2305    0.1948

  quadrilateral_is_convex ( q ) = 1

  quadrilateral vertices:
    0.0855    0.8010    0.9289    0.4886
    0.2625    0.0292    0.7303    0.5785

  quadrilateral_is_convex ( q ) = 1

quadrilateral_is_simple_test():
  quadrilateral_is_simple() is true if a quadrilateral is "simple",
  that is, non-degenerate.

  quadrilateral vertices:
     0     1     1     0
     0     0     1     1

  quadrilateral_is_simple ( q ) = 1

  quadrilateral vertices:
     0     1     2     0
     0     0     1     1

  quadrilateral_is_simple ( q ) = 1

  quadrilateral vertices:
         0    1.0000    0.2500         0
         0         0    0.2500    1.0000

  quadrilateral_is_simple ( q ) = 1

  quadrilateral vertices:
         0    1.0000   -0.5000         0
         0         0    0.5000    1.0000

  quadrilateral_is_simple ( q ) = 0

quadrilateral_perimeter_test():
  quadrilateral_perimeter() computes the perimeter of
  a quadrilateral.

  quadrilateral:
     0     1     1     0
     0     0     1     1

  quadrilateral_perimeter = 4

  quadrilateral:
     0     1     2     0
     0     0     1     1

  quadrilateral_perimeter = 5.41421

  quadrilateral:
         0    1.0000    0.2500         0
         0         0    0.2500    1.0000

  quadrilateral_perimeter = 3.58114

  quadrilateral:
         0    1.0000   -0.5000         0
         0         0    0.5000    1.0000

  quadrilateral_perimeter = 4.28825

quadrilateral_point_dist_signed_test
  quadrilateral_point_dist_signed() computes the signed distance
  from a point to a quadrilateral.

  quadrilateral vertices:
     0     1     1     0
     0     0     1     1


        P        Dist

  (     0.250000      0.250000 )   -0.250000
  (     0.750000      0.250000 )   -0.250000
  (     1.000000      1.000000 )    0.000000
  (    11.000000      0.500000 )   10.000000
  (     0.000000      0.500000 )    0.000000
  (     0.500000    -10.000000 )   10.000000
  (     2.000000      2.000000 )    1.000000

quadrilateral_point_dist_test()
  quadrilateral_point_dist() computes the distance from a
  point to a quadrilateral.

  quadrilateral vertices:
     0     1     1     0
     0     0     1     1


        P        Dist

  (     0.250000      0.250000 )    0.250000
  (     0.750000      0.250000 )    0.250000
  (     1.000000      1.000000 )    0.000000
  (    11.000000      0.500000 )   10.000000
  (     0.000000      0.500000 )    0.000000
  (     0.500000    -10.000000 )   10.000000
  (     2.000000      2.000000 )    1.414214

quadrilateral_point_near_test()
  quadrilateral_point_near() computes the nearest quadrilateral
  point to a given point.

  quadrilateral vertices:
     0     1     1     0
     0     0     1     1


        P1       P2

  (    0.250000      0.250000)  (    0.250000      0.000000)
  (    0.750000      0.250000)  (    0.750000      0.000000)
  (    1.000000      1.000000)  (    1.000000      1.000000)
  (   11.000000      0.500000)  (    1.000000      0.500000)
  (    0.000000      0.500000)  (    0.000000      0.500000)
  (    0.500000    -10.000000)  (    0.500000      0.000000)
  (    2.000000      2.000000)  (    1.000000      1.000000)

quadrilateral_random_test():
  quadrilateral_random() returns a random quadrilateral
  within the unit square.

  quadrilateral vertices:
    0.2373    0.9631    0.5211    0.4889
    0.4588    0.5468    0.2316    0.6241

  quadrilateral_is_simple ( q ) = 0
  quadrilateral_is_convex ( q ) = 0

  angles:
   26.3794
  331.4123
  300.8015
   61.4067

  Angle sum = 720
  Area = -0.0429166
  Perimeter = 1.96875

  quadrilateral vertices:
    0.6791    0.3674    0.0377    0.9133
    0.3955    0.9880    0.8852    0.7962

  quadrilateral_is_simple ( q ) = 0
  quadrilateral_is_convex ( q ) = 0

  angles:
  301.9489
  100.4293
   23.1229
  294.4989

  Angle sum = 720
  Area = -0.0721292
  Perimeter = 2.35894

  quadrilateral vertices:
    0.0987    0.3354    0.1366    0.1068
    0.2619    0.6797    0.7212    0.6538

  quadrilateral_is_simple ( q ) = 1
  quadrilateral_is_convex ( q ) = 1

  angles:
   28.3474
   72.2668
  102.0328
  157.3530

  Angle sum = 360
  Area = 0.0520119
  Perimeter = 1.14903

  quadrilateral vertices:
    0.4942    0.7150    0.8909    0.6987
    0.7791    0.9037    0.3342    0.1978

  quadrilateral_is_simple ( q ) = 0
  quadrilateral_is_convex ( q ) = 0

  angles:
  259.9468
  282.2818
  251.8048
  285.9666

  Angle sum = 1080
  Area = -0.143658
  Perimeter = 1.70154

  quadrilateral vertices:
    0.0305    0.5000    0.9047    0.6177
    0.7441    0.4799    0.6099    0.8594

  quadrilateral_is_simple ( q ) = 1
  quadrilateral_is_convex ( q ) = 1

  angles:
   40.4809
  132.8346
   58.8060
  127.8785

  Angle sum = 360
  Area = 0.173779
  Perimeter = 1.94248

quadrilateral_random_convex_test():
  quadrilateral_random_convex() returns a random convex quadrilateral
  within the unit square.


  quadrilateral vertices:
    0.0527    0.3724    0.4897    0.9516
    0.7379    0.1981    0.3395    0.9203


quadrilateral_random_simple_test()
  quadrilateral_random_simple() returns a random simple quadrilateral
  within the unit square.

  quadrilateral vertices:
    0.2691    0.5479    0.4177    0.3015
    0.4228    0.9427    0.9831    0.7011


  angles:
   21.5702
   79.0153
   95.1994
  164.2151

  Angle sum = 360
  Area = 0.0510665
  Perimeter = 1.31127

  quadrilateral vertices:
    0.6663    0.6981    0.1781    0.9991
    0.5391    0.6665    0.1280    0.1711


  angles:
  236.1199
   29.9957
   42.9977
   50.8866

  Angle sum = 360
  Area = 0.182798
  Perimeter = 2.19809

  quadrilateral vertices:
    0.6377    0.2407    0.2891    0.6951
    0.9577    0.6761    0.6718    0.0680


  angles:
   58.3474
   40.4440
  230.9805
   30.2281

  Angle sum = 360
  Area = 0.170969
  Perimeter = 2.15448

  quadrilateral vertices:
    0.6476    0.6358    0.2089    0.2362
    0.6790    0.9452    0.7093    0.1194


  angles:
  141.1346
   63.6187
  116.2771
   38.9696

  Angle sum = 360
  Area = 0.187174
  Perimeter = 2.03919

  quadrilateral vertices:
    0.8419    0.2564    0.5822    0.8699
    0.8329    0.6135    0.5407    0.2648


  angles:
   72.2754
   33.1296
  211.2253
   43.3697

  Angle sum = 360
  Area = 0.134898
  Perimeter = 1.92657

quadrilateral_test():
  Normal end of execution.

26-Apr-2022 18:24:13
